{"version":3,"sources":["Emotions/Style.js","Components/Header.js","Modules/TodoModule.js","Components/TodoInput.js","Components/Todo.js","Screens/MainScreen.js","Screens/HistoryScreen.js","Components/Routes.js","App.js","serviceWorker.js","Modules/index.js","index.js"],"names":["css","CardStyle","menuBox","lighten","darken","Main","TrashCan","logo","Header","src","process","alt","to","initialState","Item","localStorage","getItem","id","text","done","del","JSON","parse","styleInput","TodoInput","onCreate","Todos","placeholder","onKeyDown","e","target","value","keyCode","length","nowDate","Date","titleDate","getFullYear","getMonth","getDate","getDay","HeadStyle","Remove","TodoItemBox","TodoCheckBox","TodoTextBox","toggleIcon","TodoHead","count","TodoItem","Todo","onToggle","onDelete","key","onClick","TodoList","map","useState","showList","setShowList","countTodo","filter","useEffect","setItem","stringify","hide","MainScreen","todos","useSelector","state","TodoModule","dispatch","useDispatch","type","todo","addTodo","toggleTodo","deleteTodo","HistoryScreen","Routes","path","component","App","className","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6faf1ae9.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { css } from \"@emotion/core\";\nimport { lighten, darken } from \"polished\";\n\n/* 재활용 스타일 */\nconst sizing = {\n  large: css`\n    height: 3rem;\n    font-size: 1.25rem;\n  `,\n  medium: css`\n    height: 2.25rem;\n    font-size: 1rem;\n  `,\n  small: css`\n    height: 1.75rem;\n    font-size: 0.875rem;\n  `,\n  full: css`\n    height: 2.25rem;\n    font-size: 1rem;\n    width: 100%;\n  `,\n};\n\nexport const ButtonStyle = (color, size) => {\n  return css`\n    /* 공통스타일 */\n    display: inline-flex;\n    outline: none;\n    border: none;\n    border-radius: 4px;\n    color: white;\n    font-weight: bold;\n    cursor: pointer;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    justify-content: center;\n    align-items: center;\n\n    /* 크기 */\n    ${sizing[size]}\n\n    /* 색상  */\n      background: ${color};\n    &:hover {\n      background: ${lighten(0.1, color)};\n    }\n    &:active {\n      background: ${darken(0.1, color)};\n    }\n  `;\n};\n\nexport const CardStyle = css`\n  border: 1px solid #e9ecef;\n  border-radius: 4px;\n  box-shadow: 3px 0px 10px #868e96;\n  box-sizing: border-box;\n  padding: 3px 10px;\n  background: #ffffff;\n  & + & {\n    margin-top: 20px;\n  }\n`;\n\n/* Header */\nexport const menuBox = css`\n  background: #e9ecef;\n  height: 100%;\n  width: 300px;\n  border-right: 1px solid #f8f9fa;\n  box-sizing: border-box;\n  position: fixed;\n  text-align: center;\n  ul {\n    text-decoration: none;\n  }\n  ul li {\n    margin-bottom: 5px;\n    height: 30px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  li:hover {\n    background: ${lighten(0.1, \"#FFF\")};\n  }\n  li:active {\n    background: ${darken(0.1, \"#FFF\")};\n  }\n`;\n\nexport const banner = css`\n  color: #0ca678;\n`;\n\nexport const DarkBackground = css`\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: rgba(0, 0, 0, 0.8);\n`;\n\nexport const DialogBox = css`\n  width: 320px;\n  padding: 1.5rem;\n  background: white;\n  border-radius: 2px;\n  position: relative;\n\n  h3 {\n    margin: 0;\n    font-size: 1.5rem;\n  }\n  p {\n    font-size: 1.125rem;\n  }\n  a {\n    position: absolute;\n    top: 5%;\n    left: 95%;\n    cursor: pointer;\n  }\n  a:visited {\n    color: black;\n  }\n  a:active {\n    color: black;\n  }\n  input {\n    width: 100%;\n    height: 2.25rem;\n    box-sizing: border-box;\n    margin: 10px 0;\n    border: 1px solid #dee2e6;\n    border-radius: 4px;\n  }\n  input:focus {\n    outline: none;\n    border: 2px solid #8ce99a;\n    border-radius: 4px;\n  }\n`;\n\nexport const Main = css`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  padding: 20px 20px 20px 320px;\n  box-sizing: border-box;\n  background: #e9ecef;\n`;\n\nexport const TrashCan = css`\n  background: white;\n  width: 100%;\n  height: 100%;\n`;\n","import { Link } from \"react-router-dom\";\n\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport { menuBox } from \"../Emotions/Style\";\n\nconst logo = css`\n  width: 200px;\n  height: 200px;\n`;\n\nfunction Header() {\n  return (\n    <div css={menuBox}>\n      <img\n        src={process.env.PUBLIC_URL + \"/logo.png\"}\n        css={logo}\n        alt='Together Do!'\n      />\n      <ul>\n        <Link to='/'>\n          <li>홈</li>\n        </Link>\n        <Link to='/history'>\n          <li>휴지통</li>\n        </Link>\n      </ul>\n    </div>\n  );\n}\n\nexport default Header;\n","/* 액션 선언 */\nconst ADD_TODO = \"TODO/ADD_TODO\";\nconst TOGGLE_TODO = \"TODO/TOGGLE_TODO\";\nconst DELETE_TODO = \"TODO/DELETE_TODO\";\n\n/* 액션 생성함수 선언 */\nexport const addTodo = (text, id) => ({\n  type: ADD_TODO,\n  todo: {\n    id,\n    text,\n    done: false,\n    del: false,\n  },\n});\n\nexport const toggleTodo = (id) => ({\n  type: TOGGLE_TODO,\n  todo: {\n    id,\n  },\n});\n\nexport const deleteTodo = (id) => ({\n  type: DELETE_TODO,\n  todo: {\n    id,\n  },\n});\n\n/* 초기 값 선언 */\nconst initialState = () => {\n  const Item = localStorage.getItem(\"Todos\");\n  if (Item === null) {\n    return [\n      {\n        id: 1,\n        text: \"오늘 이걸 할래\",\n        done: false,\n        del: false,\n      },\n      {\n        id: 2,\n        text: \"오늘 미완성\",\n        done: false,\n        del: false,\n      },\n    ];\n  } else {\n    return JSON.parse(Item);\n  }\n};\n\n/* 리듀서 작성 */\nexport default function todoReducer(state = initialState(), action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [...state, action.todo];\n    case TOGGLE_TODO:\n      return state.map((todo) =>\n        todo.id === action.todo.id ? { ...todo, done: !todo.done } : todo\n      );\n    case DELETE_TODO:\n      return state.map((todo) =>\n        todo.id === action.todo.id ? { ...todo, del: !todo.del } : todo\n      );\n    default:\n      return state;\n  }\n}\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\nconst styleInput = css`\n  width: 100%;\n  height: 20px;\n  font-size: 1rem;\n  border-radius: 10px;\n  &:focus {\n    outline: none;\n    box-shadow: 0px 0px 2px #0066ff;\n  }\n`;\n\nfunction TodoInput({ onCreate, Todos }) {\n  const onSubmit = (e) => {\n    const text = e.target.value;\n    if (e.keyCode === 13 && text !== \"\") {\n      e.target.value = \"\";\n      const id = Todos.length + 1;\n      onCreate(text, id);\n    }\n  };\n  return (\n    <div>\n      <input\n        css={styleInput}\n        placeholder='할 일을 입력하세요.'\n        onKeyDown={onSubmit}\n      />\n    </div>\n  );\n}\n\nexport default TodoInput;\n","import { useState, useEffect } from \"react\";\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport {\n  MdArrowDropDown,\n  MdArrowDropUp,\n  MdDone,\n  MdRadioButtonUnchecked,\n  MdDelete,\n} from \"react-icons/md\";\nimport TodoInput from \"./TodoInput\";\nimport { CardStyle } from \"../Emotions/Style\";\n\nconst arrayDay = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\nconst nowDate = new Date();\nconst titleDate = `${nowDate.getFullYear()}년 ${nowDate.getMonth() + 1}월 \n${nowDate.getDate()}일 \n${arrayDay[nowDate.getDay()]}요일`;\n\nconst HeadStyle = css`\n  margin-bottom: 20px;\n  h1 {\n    font-weight: 600;\n    font-size: 2rem;\n    margin-bottom: 10px;\n  }\n`;\n\nconst Remove = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  opacity: 1;\n  &:hover {\n    color: #ff6b6b;\n  }\n`;\n\nconst TodoItemBox = css`\n  display: flex;\n  align-items: center;\n  & + & {\n    padding-bottom: 10px;\n  }\n`;\n\nconst TodoCheckBox = css`\n  display: flex;\n  align-items: center;\n  padding-right: 10px;\n  &:hover {\n    color: #0ca678;\n  }\n`;\n\nconst TodoTextBox = css`\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\n\nconst toggleIcon = css`\n  font-size: 1rem;\n  text-align: center;\n`;\n\nconst color = (value) => css`\n  color: ${value};\n`;\n\nconst TodoHead = ({ count }) => {\n  return (\n    <div css={HeadStyle}>\n      <h1>{titleDate}</h1>\n      <h2>\n        남은 할일&nbsp;\n        <span\n          css={css`\n            color: #0ca678;\n          `}\n        >\n          {count}\n        </span>\n        개\n      </h2>\n    </div>\n  );\n};\n\nconst TodoItem = ({ Todo, onToggle, onDelete }) => {\n  return (\n    <li css={TodoItemBox} key={Todo.id}>\n      <div css={TodoCheckBox} onClick={() => onToggle(Todo.id)}>\n        {Todo.done ? (\n          <span css={color(\"#0ca678\")}>\n            <MdDone />\n          </span>\n        ) : (\n          <MdRadioButtonUnchecked />\n        )}\n      </div>\n      <div css={TodoTextBox}>{Todo.text}</div>\n      <div css={Remove} onClick={() => onDelete(Todo.id)}>\n        <MdDelete />\n      </div>\n    </li>\n  );\n};\n\nconst TodoList = ({ Todos, onToggle, onDelete }) => {\n  return (\n    <ul\n      css={css`\n        list-style: none;\n      `}\n    >\n      {Todos.map((Todo) => {\n        if (Todo.del) {\n          return null;\n        } else {\n          return (\n            <TodoItem\n              key={Todo.id}\n              Todo={Todo}\n              onToggle={onToggle}\n              onDelete={onDelete}\n            />\n          );\n        }\n      })}\n    </ul>\n  );\n};\n\nfunction Todo({ Todos, onCreate, onToggle, onDelete }) {\n  const [showList, setShowList] = useState(false);\n\n  const countTodo = Todos.filter(\n    (Todo) => Todo.done === false && Todo.del === false\n  ).length;\n\n  useEffect(() => {\n    localStorage.setItem(\"Todos\", JSON.stringify(Todos));\n  });\n\n  const onShow = () => {\n    setShowList(!showList);\n  };\n\n  const hide = css`\n    display: ${showList ? \"block\" : \"none\"};\n  `;\n\n  return (\n    <div css={CardStyle}>\n      <TodoHead count={countTodo} />\n      <div css={hide}>\n        <TodoList Todos={Todos} onToggle={onToggle} onDelete={onDelete} />\n        <TodoInput Todos={Todos} onCreate={onCreate} />\n      </div>\n      <p onClick={onShow} css={toggleIcon}>\n        {showList ? <MdArrowDropUp /> : <MdArrowDropDown />}\n      </p>\n    </div>\n  );\n}\n\nexport default Todo;\n","import { useSelector, useDispatch } from \"react-redux\";\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { addTodo, deleteTodo, toggleTodo } from \"../Modules/TodoModule\";\nimport { Main } from \"../Emotions/Style\";\nimport Todo from \"../Components/Todo\";\n\nfunction MainScreen() {\n  const todos = useSelector((state) => state.TodoModule);\n  const dispatch = useDispatch();\n  const onCreate = (text, id) => dispatch(addTodo(text, id));\n  const onToggle = (id) => {\n    dispatch(toggleTodo(id));\n  };\n  const onDelete = (id) => {\n    dispatch(deleteTodo(id));\n  };\n  return (\n    <div css={Main}>\n      <Todo\n        Todos={todos}\n        onCreate={onCreate}\n        onToggle={onToggle}\n        onDelete={onDelete}\n      />\n    </div>\n  );\n}\n\nexport default MainScreen;\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { Main, TrashCan } from \"../Emotions/Style\";\n\nfunction HistoryScreen() {\n  return (\n    <div css={Main}>\n      <div css={TrashCan}>휴지통</div>\n    </div>\n  );\n}\n\nexport default HistoryScreen;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport MainScreen from \"../Screens/MainScreen\";\nimport HistoryScreen from \"../Screens/HistoryScreen\";\n\nfunction Routes() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path='/history' component={HistoryScreen} />\n        <Route path='/' component={MainScreen} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"./Components/Routes\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport TodoModule from \"./TodoModule\";\n\nconst rootReducer = combineReducers({\n  TodoModule,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./Modules\";\n\nconst store = createStore(rootReducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}